@page "/identity/account/login"
@layout AuthenticationLayout



<div class="container">
    <div class="row mt-3">
        <div class="col-lg-6 offset-md-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                 <DataAnnotationsValidator />
                 <div class="card">
                     <div class="card-header">Fill this form to Login</div>
                     <div class="card-body">
                         <div class="form-group mt-3">
                             <label for="Email">Email</label>
                             <InputText class="form-control" id="Email" @bind-Value="User.Email"></InputText>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Password</label>
                             <input type="password" class="form-control" @bind="User.Password"></input>
                         </div>
                         <div class="form-group mt-3">
                             @if (ShowLoadingButton)
                            {
                                <Client.Pages.Components.StyleComponents.ButtonLoadingSpinner />
                            }
                            else
                            {
                                <button class="btn btn-outline-success float-end" type="submit">Login</button>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <a class="btn-link" href="identity/account/register">Don't have an account? Register here</a>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    public bool ShowLoadingButton { get; set; } = false;
    Login User = new();

    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var response = await accountService.SignInAsync(User);
        if (response.Flag)
        {

            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = response.Token, RefreshToken = response.RefreshToken });
            await InvokeAsync(() => NavigationManager.NavigateTo("/", forceLoad: true));
        }

        ShowLoadingButton = false;
    }


    // private async Task DisplayDialog(string content, string title)
    // {
    //     await DialogService.AlertAsync(content, title);
    // }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationStateTask).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavigationManager.NavigateTo("/home/dashboard");
    }
}
